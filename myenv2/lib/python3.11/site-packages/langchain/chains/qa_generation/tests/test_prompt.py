import json
import unittest
from unittest.mock import patch


class TestQAConfigLoading(unittest.TestCase):

    @patch('builtins.open', new_callable=patch.mock_open, read_data='{"prompt_style": "concise"}')
    @patch('json.load', return_value={"prompt_style": "concise"})
    def test_successful_config_loading(self, mock_json_load, mock_open):
        from langchain.chains.qa_generation.prompt import style_config
        self.assertEqual(style_config, {"prompt_style": "concise"})

    @patch('builtins.open', side_effect=FileNotFoundError)
    def test_file_not_found_error(self, mock_open):
        with self.assertRaises(FileNotFoundError):
            from langchain.chains.qa_generation.prompt import style_config

    @patch('builtins.open', new_callable=patch.mock_open, read_data='invalid JSON')
    @patch('json.load', side_effect=json.JSONDecodeError('Expecting value', '', 0))
    def test_invalid_json_error(self, mock_json_load, mock_open):
        with self.assertRaises(json.JSONDecodeError):
            from langchain.chains.qa_generation.prompt import style_config

if __name__ == '__main__':
    unittest.main()

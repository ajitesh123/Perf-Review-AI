import json
import unittest
from unittest.mock import mock_open, patch

from langchain.chains.constitutional_ai.prompts import style_config


class TestPromptConfigLoading(unittest.TestCase):

    def test_successful_config_loading(self):
        mock_config = {'key': 'value'}
        with patch('builtins.open', mock_open(read_data=json.dumps(mock_config))), patch('json.load', return_value=mock_config):
            from langchain.chains.constitutional_ai.prompts import style_config
            self.assertEqual(style_config, mock_config)

    def test_file_not_found_error(self):
        with patch('builtins.open', side_effect=FileNotFoundError), self.assertRaises(FileNotFoundError):
            from langchain.chains.constitutional_ai.prompts import style_config

    def test_invalid_json_error(self):
        with patch('builtins.open', mock_open(read_data='invalid JSON')), patch('json.load', side_effect=json.JSONDecodeError('Expecting value', '', 0)), self.assertRaises(json.JSONDecodeError):
            from langchain.chains.constitutional_ai.prompts import style_config
